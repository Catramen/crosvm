/* automatically generated by rust-bindgen */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage, Align>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    storage: Storage,
    align: [Align; 0],
}

impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn new(storage: Storage) -> Self {
        Self { storage, align: [] }
    }

    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());

        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];

        let bit_index = index % 8;
        let mask = 1 << bit_index;

        byte & mask == mask
    }

    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());

        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];

        let bit_index = index % 8;
        let mask = 1 << bit_index;

        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }

    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());

        let mut val = 0;

        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                val |= 1 << i;
            }
        }

        val
    }

    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());

        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            self.set_bit(i + bit_offset, val_bit_is_set);
        }
    }
}
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201605;
pub const __STDC_NO_THREADS__: u32 = 1;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 24;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const _BITS_WCHAR_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_long;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct Trb {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 16usize], u64>,
}
#[test]
fn bindgen_test_layout_Trb() {
    assert_eq!(
        ::std::mem::size_of::<Trb>(),
        16usize,
        concat!("Size of: ", stringify!(Trb))
    );
    assert_eq!(
        ::std::mem::align_of::<Trb>(),
        1usize,
        concat!("Alignment of ", stringify!(Trb))
    );
}
impl Trb {
    #[inline]
    pub fn parameter(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 64u8) as u64) }
    }
    #[inline]
    pub fn set_parameter(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 64u8, val as u64)
        }
    }
    #[inline]
    pub fn status(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(64usize, 32u8) as u32) }
    }
    #[inline]
    pub fn set_status(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(64usize, 32u8, val as u64)
        }
    }
    #[inline]
    pub fn cycle(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(96usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_cycle(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(96usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn flags(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(97usize, 9u8) as u16) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(97usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(106usize, 6u8) as u8) }
    }
    #[inline]
    pub fn set_type(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(106usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn control(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(112usize, 16u8) as u16) }
    }
    #[inline]
    pub fn set_control(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(112usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        parameter: u64,
        status: u32,
        cycle: u8,
        flags: u16,
        type_: u8,
        control: u16,
    ) -> __BindgenBitfieldUnit<[u8; 16usize], u64> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 16usize], u64> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 64u8, {
            let parameter: u64 = unsafe { ::std::mem::transmute(parameter) };
            parameter as u64
        });
        __bindgen_bitfield_unit.set(64usize, 32u8, {
            let status: u32 = unsafe { ::std::mem::transmute(status) };
            status as u64
        });
        __bindgen_bitfield_unit.set(96usize, 1u8, {
            let cycle: u8 = unsafe { ::std::mem::transmute(cycle) };
            cycle as u64
        });
        __bindgen_bitfield_unit.set(97usize, 9u8, {
            let flags: u16 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit.set(106usize, 6u8, {
            let type_: u8 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit.set(112usize, 16u8, {
            let control: u16 = unsafe { ::std::mem::transmute(control) };
            control as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct NormalTrb {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 16usize], u64>,
}
#[test]
fn bindgen_test_layout_NormalTrb() {
    assert_eq!(
        ::std::mem::size_of::<NormalTrb>(),
        16usize,
        concat!("Size of: ", stringify!(NormalTrb))
    );
    assert_eq!(
        ::std::mem::align_of::<NormalTrb>(),
        1usize,
        concat!("Alignment of ", stringify!(NormalTrb))
    );
}
impl NormalTrb {
    #[inline]
    pub fn data_buffer_lo(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 64u8) as u64) }
    }
    #[inline]
    pub fn set_data_buffer_lo(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 64u8, val as u64)
        }
    }
    #[inline]
    pub fn trb_transfer_length(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(64usize, 17u8) as u32) }
    }
    #[inline]
    pub fn set_trb_transfer_length(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(64usize, 17u8, val as u64)
        }
    }
    #[inline]
    pub fn td_size(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(81usize, 5u8) as u8) }
    }
    #[inline]
    pub fn set_td_size(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(81usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn interrupter_target(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(86usize, 10u8) as u16) }
    }
    #[inline]
    pub fn set_interrupter_target(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(86usize, 10u8, val as u64)
        }
    }
    #[inline]
    pub fn cycle(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(96usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_cycle(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(96usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn evaluate_next_trb(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(97usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_evaluate_next_trb(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(97usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn interrupt_on_short_packet(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(98usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_interrupt_on_short_packet(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(98usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn no_snoop(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(99usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_no_snoop(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(99usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn chain(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(100usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_chain(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(100usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn interrupt_on_completion(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(101usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_interrupt_on_completion(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(101usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn immediate_data(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(102usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_immediate_data(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(102usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(104usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(104usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn block_event_interrupt(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(106usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_block_event_interrupt(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(106usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(112usize, 6u8) as u8) }
    }
    #[inline]
    pub fn set_type(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(112usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved1(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(128usize, 16u8) as u16) }
    }
    #[inline]
    pub fn set_reserved1(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(128usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        data_buffer_lo: u64,
        trb_transfer_length: u32,
        td_size: u8,
        interrupter_target: u16,
        cycle: u8,
        evaluate_next_trb: u8,
        interrupt_on_short_packet: u8,
        no_snoop: u8,
        chain: u8,
        interrupt_on_completion: u8,
        immediate_data: u8,
        reserved: u8,
        block_event_interrupt: u8,
        type_: u8,
        reserved1: u16,
    ) -> __BindgenBitfieldUnit<[u8; 24usize], u64> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 24usize], u64> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 64u8, {
            let data_buffer_lo: u64 = unsafe { ::std::mem::transmute(data_buffer_lo) };
            data_buffer_lo as u64
        });
        __bindgen_bitfield_unit.set(64usize, 17u8, {
            let trb_transfer_length: u32 = unsafe { ::std::mem::transmute(trb_transfer_length) };
            trb_transfer_length as u64
        });
        __bindgen_bitfield_unit.set(81usize, 5u8, {
            let td_size: u8 = unsafe { ::std::mem::transmute(td_size) };
            td_size as u64
        });
        __bindgen_bitfield_unit.set(86usize, 10u8, {
            let interrupter_target: u16 = unsafe { ::std::mem::transmute(interrupter_target) };
            interrupter_target as u64
        });
        __bindgen_bitfield_unit.set(96usize, 1u8, {
            let cycle: u8 = unsafe { ::std::mem::transmute(cycle) };
            cycle as u64
        });
        __bindgen_bitfield_unit.set(97usize, 1u8, {
            let evaluate_next_trb: u8 = unsafe { ::std::mem::transmute(evaluate_next_trb) };
            evaluate_next_trb as u64
        });
        __bindgen_bitfield_unit.set(98usize, 1u8, {
            let interrupt_on_short_packet: u8 =
                unsafe { ::std::mem::transmute(interrupt_on_short_packet) };
            interrupt_on_short_packet as u64
        });
        __bindgen_bitfield_unit.set(99usize, 1u8, {
            let no_snoop: u8 = unsafe { ::std::mem::transmute(no_snoop) };
            no_snoop as u64
        });
        __bindgen_bitfield_unit.set(100usize, 1u8, {
            let chain: u8 = unsafe { ::std::mem::transmute(chain) };
            chain as u64
        });
        __bindgen_bitfield_unit.set(101usize, 1u8, {
            let interrupt_on_completion: u8 =
                unsafe { ::std::mem::transmute(interrupt_on_completion) };
            interrupt_on_completion as u64
        });
        __bindgen_bitfield_unit.set(102usize, 1u8, {
            let immediate_data: u8 = unsafe { ::std::mem::transmute(immediate_data) };
            immediate_data as u64
        });
        __bindgen_bitfield_unit.set(104usize, 2u8, {
            let reserved: u8 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit.set(106usize, 1u8, {
            let block_event_interrupt: u8 = unsafe { ::std::mem::transmute(block_event_interrupt) };
            block_event_interrupt as u64
        });
        __bindgen_bitfield_unit.set(112usize, 6u8, {
            let type_: u8 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit.set(128usize, 16u8, {
            let reserved1: u16 = unsafe { ::std::mem::transmute(reserved1) };
            reserved1 as u64
        });
        __bindgen_bitfield_unit
    }
}
